.TH "GraphicsPipeline" 3 "Thu Feb 8 2024" "Liquid Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GraphicsPipeline \- D3D12 graphics pipeline wrapper\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <GraphicsPipeline\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBInputAssembler\fP"
.br
.RI "Uploads mesh data\&. "
.ti -1c
.RI "class \fBRasterizer\fP"
.br
.RI "\fBRasterizer\fP stage\&. "
.ti -1c
.RI "class \fBRootSignature\fP"
.br
.RI "Uploads data and structures to shaders\&. "
.ti -1c
.RI "class \fBStreamOutput\fP"
.br
.RI "Stream output stage\&. "
.ti -1c
.RI "class \fBTesselator\fP"
.br
.RI "\fBTesselator\fP stage\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBGraphicsPipeline\fP (const ComPtr< ID3D12Device > &device, const DXGI_SAMPLE_DESC &sample_desc, const \fBUVector2\fP &resolution)"
.br
.ti -1c
.RI "void \fBupdate\fP (const ComPtr< ID3D12Device > &device, const ComPtr< ID3D12GraphicsCommandList > &command_list, int frame_index)"
.br
.ti -1c
.RI "void \fBrun\fP (const ComPtr< ID3D12Device > &device, const ComPtr< ID3D12GraphicsCommandList > &command_list, int frame_index, const DXGI_SAMPLE_DESC &sample_desc, const D3D12_DEPTH_STENCIL_DESC &depth_stencil_desc, const \fBUVector2\fP &resolution)"
.br
.ti -1c
.RI "void \fBcompile\fP (const ComPtr< ID3D12Device > &device, const ComPtr< ID3D12GraphicsCommandList > &command_list, const DXGI_SAMPLE_DESC &sample_desc, const D3D12_DEPTH_STENCIL_DESC &depth_stencil_desc, const \fBUVector2\fP &resolution)"
.br
.ti -1c
.RI "void \fBclean_up\fP ()"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBGraphicsPipeline\fP &pipeline) const noexcept"
.br
.ti -1c
.RI "void \fBoperator=\fP (const \fBGraphicsPipeline\fP &pipeline) noexcept"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "ComPtr< ID3D12PipelineState > \fBpipeline_state_object\fP = nullptr"
.br
.ti -1c
.RI "bool \fBcompilation_signal\fP = true"
.br
.ti -1c
.RI "std::vector< D3D12_INPUT_ELEMENT_DESC > \fBinput_layout\fP"
.br
.ti -1c
.RI "class \fBGraphicsPipeline::InputAssembler\fP \fBinput_assembler\fP"
.br
.ti -1c
.RI "std::string \fBvs\fP {'DefaultVertex\&.hlsl'}"
.br
.ti -1c
.RI "std::string \fBhs\fP {}"
.br
.ti -1c
.RI "std::string \fBds\fP {}"
.br
.ti -1c
.RI "std::string \fBgs\fP {}"
.br
.ti -1c
.RI "std::string \fBps\fP {'LitPixel\&.hlsl'}"
.br
.ti -1c
.RI "class \fBGraphicsPipeline::Tesselator\fP \fBtesselator\fP"
.br
.ti -1c
.RI "class \fBGraphicsPipeline::Rasterizer\fP \fBrasterizer\fP"
.br
.ti -1c
.RI "class \fBGraphicsPipeline::StreamOutput\fP \fBstream_output\fP"
.br
.ti -1c
.RI "class \fBGraphicsPipeline::RootSignature\fP \fBroot_signature\fP"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr UINT \fBNUMBER_OF_BUFFERS\fP = 3u"
.br
.in -1c
.SH "Detailed Description"
.PP 
D3D12 graphics pipeline wrapper\&. 
.SH "Member Data Documentation"
.PP 
.SS "std::vector<D3D12_INPUT_ELEMENT_DESC> GraphicsPipeline::input_layout"
\fBInitial value:\fP.PP
.nf
= {
        { "POSITION",   0,  DXGI_FORMAT_R32G32B32_FLOAT,    0,  0,                              D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA, 0 },
        { "TEXCOORD",   0,  DXGI_FORMAT_R32G32_FLOAT,       0,  D3D12_APPEND_ALIGNED_ELEMENT,   D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA, 0 },
        { "NORMAL",     0,  DXGI_FORMAT_R32G32B32_FLOAT,    0,  D3D12_APPEND_ALIGNED_ELEMENT,   D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA, 0 },
        { "TANGENT",    0,  DXGI_FORMAT_R32G32B32_FLOAT,    0,  D3D12_APPEND_ALIGNED_ELEMENT,   D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA, 0 }
    }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for Liquid Engine from the source code\&.
